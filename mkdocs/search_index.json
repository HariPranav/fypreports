{
    "docs": [
        {
            "location": "/",
            "text": "Final Year Project Report\n\n\nIndex\n\n\n1.Link Layer\n\n\n1a. MITM Attacks\n\n\n1b. ARP Attacks\n\n\n2.Transport Layer\n\n\n2a. TCP Attacks\n\n\n1. Link Layer\n\n\nThe IEEE 802.x Link layers are a family of standards that enable intercommunications between equipment from a variety of manufacturers\n\n\nLink layer communication is facilitated by Network Interface Cards (NICs) and the respective device drivers.Using those, a host can interact with the physical medium on which it resides.Any NIC has a unique identification number known as a\nMAC address which is issued by the NIC\u2019s manufacturer during NIC creation\n\n\n\u2022 There is no way to validate MAC address ownership whenever an ARP request or response is issued.\n\u2022 ARP is stateless. Whenever an ARP response is received, hosts will\ncreate or update a cache entry with the observed IP/MAC pair (regardless of them issuing an ARP request or not).\n\u2022 An initial ARP request can result in the requester\u2019s IP/MAC pair being cached by listening (for broadcasts) hosts; this is done to reduce ARP broadcast requests\n\n\n1a. MITM Attacks\n\n\nThose ARP shortcomings can be leveraged by an attacker to launch man-in-the-middle attacks, where he/she can pose as just another host on the local network or even as a router.\n\n\nIf such attacks are executed successfully, the attacker can receive traffic destined for another host, inspect it or alter it and ultimately forward it to the original destination. Not only that, but the attacker can also receive, inspect or alter the traffic from the original destination and ultimately\nforward it back to the original sender.\n\n\n\n\n1b. ARP Attacks\n\n\nARP poisoning can be exploited to add fake information between two communication peers into a local network. In a scenario in which M (the attacker) wants to listen to all the traffic between A and B, Mwould have to send fake IP/MAC pairs to both A and B, making himself the Man-in-the-Middle   \n\n\n\u2022 Normal: ARP broadcasts are normal from both clients and servers, including network devices at a reasonable flow.\n\u2022 Suspicious: Tens, hundreds, or even thousands of ARP broadcast messages within a small time window.\n\n\nEven without knowing off hand what legit device can potentially have that MAC address on your network, but just based on the flow and speed of the ARP Requests, we can tell something is odd.\n\n\n\n\n\n\n1.c ARP poisioning:\n\n\nThe following are the steps for a successful attack:\n1. M would pretend to be B to A: it will send a gratuitous ARP reply with the pair: IP_B->MAC_M\n2. M would pretend to be A to B: it will send a gratuitous ARP reply with the pair: IP_A->MAC_M\nBecause of the TTL in hosts ARP caches, an attacker would need to send these packets at intervals lower than the timeout (usually every 30 seconds is a good choice).\n\n\n\n\n\n\n1d. Detection of ARP on the Stack\n\n\nAnalysing the mac_flood.pcap\n\n\nHere we can see that the host is Kali machine \n\n\n\n\nUnder the alert signature we can see that suricata can detect the different signatures\n\n\n\n\nHere under the alert category generated we can see that that see that the IDS can identify that there is potentially bad traffic\n\n\n\n\nIn the dashbord below we can see the different fields such as \n\n\n\n\nDestination IP vs count of the packets\n\n\nThe duration of ARP sent which is abnormally high \n\n\nThe Protocol UDP which is higher than TCP which carries the ICMP message protocol\n\n\nThe Orgin IP of the ARP request which is abnormally high\n\n\n\n\n\n\n2. Transport Layer:\n\n\nThe main protocols are UDP and TCP which are used in the transport layer and TCP is a connection oriented protocol where as UDP is not.\n\n\nSince TCP is connection oriented, it is reliable and it can establish the connection via a THREE WAY HANDSHAKE.\n\n\n\n\nThree way handshake: There are mainly four flags, SYN, ACK, SEQ and FYN\n\n\nSteps:\n\n\n\n\n\n\nThe client send the TCP packet with a SYN flag set to 1 and the ACK to 0 and the SEQ set to a random number.\n\n\n\n\n\n\nIn the next step the SEQ is set to a random value by the receiver and the ACK flag is set to the increment by 1 from the SEQ number. This shows that the receiver has acknowledged the initial sequence number of the sender\n\n\n\n\n\n\nIn the last step the three way handshake is completed as the ACK is set to the SEQ +1 and the SYN flag is set.\n\n\n\n\n\n\n\n\n2.a Identifying Malicious traffic in the Transport Layer :\n\n\nIf there are devices running scans using tools such as NMAP it can be identified as there are excessive SYN packets being sent without completing the three way handshake.\n\n\nAlso if there are usage of different flags we can identify the irregularities.\n\n\nAnd finally if a single host is sending traffic such as SYN flag to multiple hosts we can flag it as an anomaloy.\n\n\nMore specifically, Nmap sends a series of SYN packets to an open port and tries to perform OS fingerprinting, by attempting to identify the ISN(Initial Sequence number) generation formula in the returned SYN/ACK and comparing the returned values to a file that contains expected returned values for a series of checks.\n\n\nAnalysing the nmap_sequence number prediction.pcap\n\n\nScanning by a single IP sending multiple SYN flags. Here we can see that the \nconn_state\n index of ZEEK iDS identifies the state of the connection.\n\n\n\n\nWe can use the history flag of Zeek to check the type of packet sent and received as well\n\n\n\n\nAnalysing strange_scanning.pcap \n\n\nObviously, we are dealing with a scanning attempt, but what is that destination port 0 (TCP) all about?A host is not supposed to be listening on port 0. A scanning tool sending packets to port 0 (TCP) of the remote host, is trying identify if the remote host is alive. If the remote host is alive, then, a RST response should be sent to all those packets.\n\n\nHere in the dashboard we can see that under the \nhistory\n it is \nSr\n and the \nid.resp_p\n is 0. \nconn_state\n is \nREJ\n which says that the connection is rejected. \n\n\n\n\nAll Dashboards for TCP attacks:",
            "title": "Home"
        },
        {
            "location": "/#final-year-project-report",
            "text": "",
            "title": "Final Year Project Report"
        },
        {
            "location": "/#index",
            "text": "",
            "title": "Index"
        },
        {
            "location": "/#1link-layer",
            "text": "",
            "title": "1.Link Layer"
        },
        {
            "location": "/#1a-mitm-attacks",
            "text": "",
            "title": "1a. MITM Attacks"
        },
        {
            "location": "/#1b-arp-attacks",
            "text": "",
            "title": "1b. ARP Attacks"
        },
        {
            "location": "/#2transport-layer",
            "text": "",
            "title": "2.Transport Layer"
        },
        {
            "location": "/#2a-tcp-attacks",
            "text": "",
            "title": "2a. TCP Attacks"
        },
        {
            "location": "/#1-link-layer",
            "text": "The IEEE 802.x Link layers are a family of standards that enable intercommunications between equipment from a variety of manufacturers  Link layer communication is facilitated by Network Interface Cards (NICs) and the respective device drivers.Using those, a host can interact with the physical medium on which it resides.Any NIC has a unique identification number known as a\nMAC address which is issued by the NIC\u2019s manufacturer during NIC creation  \u2022 There is no way to validate MAC address ownership whenever an ARP request or response is issued.\n\u2022 ARP is stateless. Whenever an ARP response is received, hosts will\ncreate or update a cache entry with the observed IP/MAC pair (regardless of them issuing an ARP request or not).\n\u2022 An initial ARP request can result in the requester\u2019s IP/MAC pair being cached by listening (for broadcasts) hosts; this is done to reduce ARP broadcast requests",
            "title": "1. Link Layer"
        },
        {
            "location": "/#1a-mitm-attacks_1",
            "text": "Those ARP shortcomings can be leveraged by an attacker to launch man-in-the-middle attacks, where he/she can pose as just another host on the local network or even as a router.  If such attacks are executed successfully, the attacker can receive traffic destined for another host, inspect it or alter it and ultimately forward it to the original destination. Not only that, but the attacker can also receive, inspect or alter the traffic from the original destination and ultimately\nforward it back to the original sender.",
            "title": "1a. MITM Attacks"
        },
        {
            "location": "/#1b-arp-attacks_1",
            "text": "ARP poisoning can be exploited to add fake information between two communication peers into a local network. In a scenario in which M (the attacker) wants to listen to all the traffic between A and B, Mwould have to send fake IP/MAC pairs to both A and B, making himself the Man-in-the-Middle     \u2022 Normal: ARP broadcasts are normal from both clients and servers, including network devices at a reasonable flow.\n\u2022 Suspicious: Tens, hundreds, or even thousands of ARP broadcast messages within a small time window.  Even without knowing off hand what legit device can potentially have that MAC address on your network, but just based on the flow and speed of the ARP Requests, we can tell something is odd.",
            "title": "1b. ARP Attacks"
        },
        {
            "location": "/#1c-arp-poisioning",
            "text": "The following are the steps for a successful attack:\n1. M would pretend to be B to A: it will send a gratuitous ARP reply with the pair: IP_B->MAC_M\n2. M would pretend to be A to B: it will send a gratuitous ARP reply with the pair: IP_A->MAC_M\nBecause of the TTL in hosts ARP caches, an attacker would need to send these packets at intervals lower than the timeout (usually every 30 seconds is a good choice).",
            "title": "1.c ARP poisioning:"
        },
        {
            "location": "/#1d-detection-of-arp-on-the-stack",
            "text": "Analysing the mac_flood.pcap  Here we can see that the host is Kali machine    Under the alert signature we can see that suricata can detect the different signatures   Here under the alert category generated we can see that that see that the IDS can identify that there is potentially bad traffic   In the dashbord below we can see the different fields such as    Destination IP vs count of the packets  The duration of ARP sent which is abnormally high   The Protocol UDP which is higher than TCP which carries the ICMP message protocol  The Orgin IP of the ARP request which is abnormally high",
            "title": "1d. Detection of ARP on the Stack"
        },
        {
            "location": "/#2-transport-layer",
            "text": "The main protocols are UDP and TCP which are used in the transport layer and TCP is a connection oriented protocol where as UDP is not.  Since TCP is connection oriented, it is reliable and it can establish the connection via a THREE WAY HANDSHAKE.   Three way handshake: There are mainly four flags, SYN, ACK, SEQ and FYN  Steps:    The client send the TCP packet with a SYN flag set to 1 and the ACK to 0 and the SEQ set to a random number.    In the next step the SEQ is set to a random value by the receiver and the ACK flag is set to the increment by 1 from the SEQ number. This shows that the receiver has acknowledged the initial sequence number of the sender    In the last step the three way handshake is completed as the ACK is set to the SEQ +1 and the SYN flag is set.",
            "title": "2. Transport Layer:"
        },
        {
            "location": "/#2a-identifying-malicious-traffic-in-the-transport-layer",
            "text": "If there are devices running scans using tools such as NMAP it can be identified as there are excessive SYN packets being sent without completing the three way handshake.  Also if there are usage of different flags we can identify the irregularities.  And finally if a single host is sending traffic such as SYN flag to multiple hosts we can flag it as an anomaloy.  More specifically, Nmap sends a series of SYN packets to an open port and tries to perform OS fingerprinting, by attempting to identify the ISN(Initial Sequence number) generation formula in the returned SYN/ACK and comparing the returned values to a file that contains expected returned values for a series of checks.  Analysing the nmap_sequence number prediction.pcap  Scanning by a single IP sending multiple SYN flags. Here we can see that the  conn_state  index of ZEEK iDS identifies the state of the connection.   We can use the history flag of Zeek to check the type of packet sent and received as well   Analysing strange_scanning.pcap   Obviously, we are dealing with a scanning attempt, but what is that destination port 0 (TCP) all about?A host is not supposed to be listening on port 0. A scanning tool sending packets to port 0 (TCP) of the remote host, is trying identify if the remote host is alive. If the remote host is alive, then, a RST response should be sent to all those packets.  Here in the dashboard we can see that under the  history  it is  Sr  and the  id.resp_p  is 0.  conn_state  is  REJ  which says that the connection is rejected.    All Dashboards for TCP attacks:",
            "title": "2.a Identifying Malicious traffic in the Transport Layer :"
        }
    ]
}